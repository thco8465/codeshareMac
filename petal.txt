#include <GL/glut.h>
#include <cmath>
#include <cstdlib>
#include <ctime>

void drawPetal() {
    glBegin(GL_TRIANGLES);
    // Define the vertices of a petal
    glVertex2f(0, 0);
    glVertex2f(0.1, 0.5);
    glVertex2f(-0.1, 0.5);
    glEnd();
}

void drawStem() {
    glBegin(GL_QUADS);
    // Define the vertices of a stem (rectangle)
    glVertex2f(-0.05, -1.0);
    glVertex2f(0.05, -1.0);
    glVertex2f(0.05, 0.0);
    glVertex2f(-0.05, 0.0);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Create a field of random flowers
    int numFlowers = 10;
    for (int i = 0; i < numFlowers; ++i) {
        glPushMatrix();

        // Randomize the petal color
        glColor3f((float)rand() / RAND_MAX, (float)rand() / RAND_MAX, (float)rand() / RAND_MAX);

        // Randomize the number of petals (between 5 and 8)
        int numPetals = (rand() % 4) + 5;
        for (int j = 0; j < numPetals; ++j) {
            glPushMatrix();

            // Apply random scaling to the petals
            float randomScale = (rand() % 6 + 5) / 10.0;
            glScalef(randomScale, randomScale, 1.0);

            // Rotate petals around the stem
            glRotatef(j * 360.0f / numPetals, 0, 0, 1);

            // Randomly position each flower in the field
            float xPos = (float)(rand() % 200 - 100) / 100.0;
            float yPos = (float)(rand() % 200 - 100) / 100.0;
            glTranslatef(xPos, yPos, 0);

            // Draw petals
            drawPetal();
            glPopMatrix();
        }

        // Draw the stem for each flower
        drawStem();

        glPopMatrix();
    }

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Variations of Flowers in OpenGL");
    glutDisplayFunc(display);

    // Seed the random number generator with the current time
    srand(time(NULL));

    glutMainLoop();
    return 0;
}
