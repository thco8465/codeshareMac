#include <GL/glut.h>
#include <cmath>
#include <cstdlib>
#include <ctime>

void drawPetal() {
    glBegin(GL_TRIANGLES);
    // Define the vertices of a petal
    glVertex2f(0, 0);
    glVertex2f(0.1, 0.5);
    glVertex2f(-0.1, 0.5);
    glEnd();
}

void drawStem() {
    glBegin(GL_QUADS);
    // Define the vertices of a stem (rectangle)
    glVertex2f(-0.05, -1.0);
    glVertex2f(0.05, -1.0);
    glVertex2f(0.05, 0.0);
    glVertex2f(-0.05, 0.0);
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Randomize the petal color
    glColor3f((float)rand() / RAND_MAX, (float)rand() / RAND_MAX, (float)rand() / RAND_MAX);

    // Draw the stem
    drawStem();

    // Draw six petals around the stem in a circular pattern
    int numPetals = 6;
    for (int i = 0; i < numPetals; ++i) {
        glPushMatrix();

        // Apply random scaling to the petals
        float randomScale = (rand() % 10 + 1) / 10.0;
        glScalef(randomScale, randomScale, 1.0);

        glRotatef(i * 360.0f / numPetals, 0, 0, 1);
        glTranslatef(0, 0.6, 0);  // Position the petals above the stem
        drawPetal();
        glPopMatrix();
    }

    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Randomized Flowers in OpenGL");
    glutDisplayFunc(display);

    // Seed the random number generator with the current time
    srand(time(NULL));

    glutMainLoop();
    return 0;
}
